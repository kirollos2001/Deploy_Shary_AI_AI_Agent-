name: Deploy to Cloud Run

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGION: us-central1
  SERVICE_NAME: ai-shary                 # اسم خدمة Cloud Run
  REPO: ai-shary                         # اسم الصورة داخل الـ repo
  ARTIFACT_REPO: docker                  # اسم Repository في Artifact Registry
  PORT: 5000                             # غيّرها لو تطبيقك بيسمع على بورت تاني

permissions:
  contents: read
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) تشخيص سريع لوجود السيكرتس (بدون طباعة القيم)
      - name: Debug secrets presence (safe)
        run: |
          echo "Has GCP_SERVICE_ACCOUNT_KEY? $([ -n '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}' ] && echo YES || echo NO)"
          echo "Has GCP_PROJECT_ID?         $([ -n '${{ secrets.GCP_PROJECT_ID }}' ] && echo YES || echo NO)"
          echo "Has GEMINI_API_KEY?         $([ -n '${{ secrets.GEMINI_API_KEY }}' ] && echo YES || echo NO)"

      # 2) تحديد PROJECT_ID: من السيكرت المباشر أو من JSON المفتاح
      - name: Resolve PROJECT_ID
        run: |
          if [ -n "${{ secrets.GCP_PROJECT_ID }}" ]; then
            echo "PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}" >> $GITHUB_ENV
          else
            echo "PROJECT_ID=${{ fromJSON(secrets.GCP_SERVICE_ACCOUNT_KEY).project_id }}" >> $GITHUB_ENV
          fi
          echo "PORT=${{ env.PORT }}" >> $GITHUB_ENV
          echo "Resolved PROJECT_ID set."

      # 3) مصادقة Google Cloud بمفتاح الخدمة
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      # 4) إعداد gcloud على نفس المشروع
      - name: Set up gcloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      # 5) من أنا؟ (SA email المستخدم من السيكرت) + حالة الأوث والمشروع
      - name: Who am I (service account) + gcloud state
        run: |
          echo "SA_EMAIL=${{ fromJSON(secrets.GCP_SERVICE_ACCOUNT_KEY).client_email }}"
          echo "== gcloud auth list =="; gcloud auth list
          echo "== gcloud config list =="; gcloud config list
          echo "Resolved PROJECT_ID=${{ env.PROJECT_ID }}"

      # 6) تأكيد وجود الـ repo + طباعة IAM bindings للريبو (تشخيص صلاحيات الـ push)
      - name: Verify Artifact Registry repo and IAM (diagnostics)
        run: |
          echo "Checking Artifact Registry '${{ env.ARTIFACT_REPO }}' in '${{ env.REGION }}'..."
          if ! gcloud artifacts repositories describe "${{ env.ARTIFACT_REPO }}" --location="${{ env.REGION }}" >/dev/null 2>&1; then
            echo "::error::Artifact Registry repository '${{ env.ARTIFACT_REPO }}' not found in region '${{ env.REGION }}'."
            exit 1
          fi
          echo "== Repo IAM bindings (role -> members) =="
          gcloud artifacts repositories get-iam-policy "${{ env.ARTIFACT_REPO }}" \
            --location="${{ env.REGION }}" \
            --format='table(bindings.role, bindings.members)' || true

      # 7) تسجيل دخول Docker إلى Artifact Registry
      - name: Docker login to Artifact Registry
        run: |
          gcloud auth configure-docker ${REGION}-docker.pkg.dev --quiet
          TOKEN="$(gcloud auth print-access-token)"
          echo "$TOKEN" | docker login -u oauth2accesstoken --password-stdin "${REGION}-docker.pkg.dev"

      # 8) بناء الصورة (لوجز تفصيلية)
      - name: Build image (verbose)
        env:
          IMAGE: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.REPO }}:${{ github.sha }}
        run: |
          echo "Building IMAGE=$IMAGE"
          docker build --progress=plain -t "$IMAGE" .

      # 9) دفع الصورة (لو فشل يطبع تشخيص واضح)
      - name: Push image (with diagnostics)
        env:
          IMAGE: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.REPO }}:${{ github.sha }}
        run: |
          set -e
          if ! docker push "$IMAGE"; then
            echo "::error::Docker push failed (likely IAM)."
            echo "== Who am I? =="; gcloud auth list
            echo "== Repo IAM =="
            gcloud artifacts repositories get-iam-policy "${ARTIFACT_REPO}" \
              --location="${REGION}" \
              --format='table(bindings.role, bindings.members)' || true
            echo "If you see no 'artifactregistry.writer' for your SA, add:"
            echo "gcloud artifacts repositories add-iam-policy-binding ${ARTIFACT_REPO} --location=${REGION} --member=serviceAccount:${{ fromJSON(secrets.GCP_SERVICE_ACCOUNT_KEY).client_email }} --role=roles/artifactregistry.writer"
            exit 1
          fi

      # 10) نشر على Cloud Run
      - name: Deploy to Cloud Run
        env:
          IMAGE: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.REPO }}:${{ github.sha }}
        run: |
          gcloud run deploy ${SERVICE_NAME} \
            --image "$IMAGE" \
            --region ${REGION} \
            --platform managed \
            --allow-unauthenticated \
            --port ${PORT} \
            --memory 1Gi \
            --cpu 1 \
            --max-instances 4 \
            --concurrency 80 \
            --set-env-vars PORT=${PORT},GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}

      # 11) اطبع عنوان الخدمة بعد النشر
      - name: Post-deploy URL
        run: |
          echo "Service URL:"
          gcloud run services describe ${SERVICE_NAME} --region ${REGION} --format 'value(status.url)'
